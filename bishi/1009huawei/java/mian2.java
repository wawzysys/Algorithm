import java.io.*;
import java.util.*;

public class mian2 {
    public static void main(String[] args) throws IOException {
        // ?? BufferedReader ????
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // ?????? N
        int N = Integer.parseInt(br.readLine());

        // ?????????????????????1??
        int[] dur = new int[N + 1];
        int countDur = 0;

        // ?????????????????
        while (countDur < N) {
            String line = br.readLine();
            if (line == null)
                break;
            StringTokenizer stDur = new StringTokenizer(line);
            while (stDur.hasMoreTokens() && countDur < N) {
                dur[countDur + 1] = Integer.parseInt(stDur.nextToken());
                countDur++;
            }
        }

        // ????????????adj.get(i) ????????? i ???
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= N; i++)
            adj.add(new ArrayList<>());

        // ?? in_deg ?????????????????
        int[] in_deg = new int[N + 1];
        int i = 1;

        // ???????????
        while (i <= N) {
            String line = br.readLine();
            if (line == null) {
                line = "-1"; // ??????????? -1
            }
            line = line.trim();
            if (line.isEmpty()) {
                continue; // ????
            }
            if (line.equals("-1")) {
                i++; // ????????????
                continue;
            }
            StringTokenizer st = new StringTokenizer(line);
            while (st.hasMoreTokens()) {
                int num = Integer.parseInt(st.nextToken());
                adj.get(num).add(i); // ?? num ??? i ?????
                in_deg[i]++; // ???? i ???
            }
            i++;
        }

        // ????????????????0???
        Queue<Integer> q = new LinkedList<>();
        // ?? earliest ?????????????
        int[] earliest = new int[N + 1];

        // ????????????0????????????????
        for (int j = 1; j <= N; j++) {
            if (in_deg[j] == 0) {
                q.add(j);
                earliest[j] = dur[j];
            }
        }

        // ????????????????????
        while (!q.isEmpty()) {
            int u = q.poll();
            for (int v : adj.get(u)) {
                // ???? v ???????
                earliest[v] = Math.max(earliest[v], earliest[u] + dur[v]);
                in_deg[v]--; // ???? v ???
                if (in_deg[v] == 0) {
                    q.add(v); // ?????0??????
                }
            }
        }

        // ??????????????????????????
        int res = 0;
        for (int j = 1; j <= N; j++)
            res = Math.max(res, earliest[j]);

        // ????
        System.out.println(res);
    }
}
